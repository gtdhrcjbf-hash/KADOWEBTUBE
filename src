const express = require('express');
const helmet = require('helmet');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
const winston = require('winston');
require('dotenv').config();
const app = express();
const PORT = process.env.PORT || 3000;
// Logger setup
const logger = winston.createLogger({
level: 'info',
format: winston.format.combine(
winston.format.timestamp(),
winston.format.errors({ stack: true }),
winston.format.json()
),
transports: [
new winston.transports.Console({
format: winston.format.simple()
})
]
});
// Security middleware
app.use(helmet());
// CORS configuration
app.use(cors({
origin: process.env.FRONTEND_URL || '*',
credentials: true
}));
// Rate limiting
const limiter = rateLimit({
windowMs: 15 * 60 * 1000,
max: 100,
message: 'Too many requests from this IP, please try again later.'
});
app.use('/api/', limiter);
// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
// Request logging
app.use((req, res, next) => {
logger.info(`${req.method} ${req.path} - ${req.ip}`);
next();
});
// Health check endpoint
app.get('/api/health', (req, res) => {
res.json({
status: 'OK',
message: 'KADOWEBTUBE Backend is running',
timestamp: new Date().toISOString(),
version: '1.0.0',
environment: process.env.NODE_ENV || 'development'
});
});
// API documentation endpoint
app.get('/api/docs', (req, res) => {
res.json({
service: 'KADOWEBTUBE Automation Backend',
version: '1.0.0',
endpoints: {
health: 'GET /api/health - Service health check',
docs: 'GET /api/docs - API documentation'
},
status: 'Active'
});
});
// Root endpoint
app.get('/', (req, res) => {
res.json({
message: 'Welcome to KADOWEBTUBE Automation Backend',
version: '1.0.0',
docs: '/api/docs',
health: '/api/health'
});
});
// Error handling middleware
app.use((err, req, res, next) => {
logger.error('Unhandled error:', err);
res.status(500).json({
error: 'Internal server error',
message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
});
});
// 404 handler
app.use('*', (req, res) => {
res.status(404).json({
error: 'Endpoint not found',
message: `Path ${req.originalUrl} not found`,
availableEndpoints: ['/', '/api/health', '/api/docs']
});
});
// Start server
app.listen(PORT, () => {
console.log(`🚀 KADOWEBTUBE Backend server running on port ${PORT}`);
console.log(`📊 Health check: http://localhost:${PORT}/api/health`);
console.log(`📚 Documentation: http://localhost:${PORT}/api/docs`);
console.log(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);
logger.info(`Server started successfully on port ${PORT}`);
});
// Graceful shutdown
process.on('SIGTERM', () => {
console.log('👋 SIGTERM received, shutting down gracefully');
logger.info('Server shutting down gracefully');
process.exit(0);
});
process.on('SIGINT', () => {
console.log('👋 SIGINT received, shutting down gracefully');
logger.info('Server shutting down gracefully');
process.exit(0);
});
